{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/takasivenkatasandeep/Desktop/nursery/src/Containers/Plants/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport MatchCard from '../../Components/MatchCard';\nimport Loader from '../../Components/Loader';\nimport useStyles from './style';\nimport { getAllDocuments, getSingleDocument } from '../../services/firebase';\nexport default function Index({\n  loggedinUser,\n  externalData,\n  collectionName = 'plants',\n  location,\n  ...rest\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [plants, setPlants] = useState([]);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [snackBar, setSnackBar] = React.useState({\n    value: false,\n    message: '',\n    type: ''\n  });\n  useEffect(() => {\n    var mounted = true;\n\n    async function getPlants() {\n      setLoading(true);\n\n      if (Object.keys(loggedinUser).length !== 0) {\n        const isAdminResponse = await getSingleDocument('users', loggedinUser.userId);\n\n        if (isAdminResponse.isAdmin) {\n          setIsAdmin(true);\n        }\n      }\n\n      const response = await getAllDocuments(collectionName);\n      console.log(response);\n\n      if (mounted) {\n        setPlants(response);\n      }\n\n      setLoading(false);\n    }\n\n    getPlants();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  if (!loading) {\n    const filteredData = externalData ? externalData : plants;\n\n    if (filteredData.length !== 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.root,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: filteredData.map((plant, index) => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              xs: 12,\n              sm: 6,\n              lg: 3,\n              spacing: 5,\n              className: classes.wrapper,\n              children: /*#__PURE__*/_jsxDEV(MatchCard, {\n                isAdmin: isAdmin,\n                plantData: plant,\n                loggedinUser: loggedinUser,\n                history: rest.history\n              }, plant.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        color: \"secondary\",\n        variant: \"h4\",\n        align: \"center\",\n        children: \"No Items To show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Index, \"a2u5g5nZAn9inpgRhznDty9baDI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/Users/takasivenkatasandeep/Desktop/nursery/src/Containers/Plants/index.js"],"names":["React","useState","useEffect","Grid","Typography","MatchCard","Loader","useStyles","getAllDocuments","getSingleDocument","Index","loggedinUser","externalData","collectionName","location","rest","classes","plants","setPlants","isAdmin","setIsAdmin","loading","setLoading","snackBar","setSnackBar","value","message","type","mounted","getPlants","Object","keys","length","isAdminResponse","userId","response","console","log","filteredData","root","map","plant","index","wrapper","history","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Grid, Typography } from '@material-ui/core'\nimport MatchCard from '../../Components/MatchCard'\nimport Loader from '../../Components/Loader'\nimport useStyles from './style'\nimport { getAllDocuments, getSingleDocument } from '../../services/firebase'\n\nexport default function Index({\n    loggedinUser,\n    externalData,\n    collectionName='plants',\n    location,\n    ...rest\n}){\n    const classes = useStyles()\n    const [plants, setPlants] = useState([])\n    const [isAdmin, setIsAdmin] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [snackBar, setSnackBar] = React.useState({\n        value: false,\n        message: '',\n        type: '',\n    })\n    \n    useEffect(() => {\n        var mounted = true\n        async function getPlants() {\n            setLoading(true)\n            if (Object.keys(loggedinUser).length !== 0) {\n                const isAdminResponse = await getSingleDocument('users', loggedinUser.userId)\n                if (isAdminResponse.isAdmin) {\n                    setIsAdmin(true)\n                }\n            }\n                const response = await getAllDocuments(collectionName)\n                console.log(response)\n                if (mounted) {\n                    setPlants(response)\n                }\n                setLoading(false)\n        }\n        \n            getPlants()\n        \n        return () => { mounted = false }\n    },[])\n\n\n \n    if (!loading) {\n        const filteredData = externalData ? externalData : plants\n        if (filteredData.length !== 0) {\n            return (\n                <div className={classes.root}>\n                    <Grid container spacing={2}>\n                        {filteredData.map((plant,index) => {\n                            return (\n                                <Grid\n                                    container\n                                    item\n                                    key={index}\n                                    xs={12}\n                                    sm={6}\n                                    lg={3}\n                                    spacing={5}\n                                    className={classes.wrapper}\n                                >\n                                    <MatchCard\n                                        isAdmin={isAdmin}\n                                        key={plant.id}\n                                        plantData={plant}\n                                        loggedinUser={loggedinUser}\n                                        history={rest.history}\n                                    />\n                                </Grid>\n                            )\n                        })}\n                    </Grid>\n                </div>\n            )\n        } else {\n            return (\n                <Typography\n                    component='h1'\n                    color='secondary'\n                    variant='h4'\n                    align='center'\n                >\n                    No Items To show\n                </Typography>\n            )\n        }\n    } else {\n        return (\n            <Typography align='center'>\n                <Loader />\n            </Typography>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}