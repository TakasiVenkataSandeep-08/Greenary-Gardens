{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport { PlayCircleOutlineTwoTone } from '@material-ui/icons';\nconst config = {\n  apiKey: \"AIzaSyBmIcRoW1W55HUxkDq2I8A76VbfSOvifew\",\n  authDomain: \"greenary-gardens.firebaseapp.com\",\n  projectId: \"greenary-gardens\",\n  storageBucket: \"greenary-gardens.appspot.com\",\n  messagingSenderId: \"909264771422\",\n  appId: \"1:909264771422:web:445f6d6267c15d4c9e17cf\",\n  measurementId: \"G-B1J3H3H0GL\"\n};\napp.initializeApp(config);\nconst firebaseDb = app.firestore();\nconst storageRef = app.storage().ref();\nexport default app;\nexport async function addUser(email, password) {\n  try {\n    let userData = await app.auth().createUserWithEmailAndPassword(email, password);\n    await firebaseDb.collection('users').doc(userData.user.uid).set({\n      email,\n      password,\n      createdAt: app.firestore.FieldValue.serverTimestamp()\n    });\n  } catch (error) {\n    alert(error.message);\n  }\n}\nexport async function logoutUser() {\n  try {\n    await app.auth().signOut();\n  } catch (err) {\n    alert(err.message);\n  }\n}\nexport async function loginUser(email, password) {\n  try {\n    await app.auth().signInWithEmailAndPassword(email, password);\n  } catch (error) {\n    alert(error.message);\n  }\n}\nexport async function addNote(collectionName, data) {\n  await firebaseDb.collection(collectionName).add({ ...data,\n    createdAt: app.firestore.FieldValue.serverTimestamp()\n  });\n}\nexport async function getUserNotes(id) {\n  let data = [];\n  let userdata = await firebaseDb.collection('notes').where(\"userId\", \"==\", id).orderBy(\"createdAt\", \"desc\").get();\n  userdata.forEach(doc => {\n    data = [...data, {\n      id: doc.id,\n      text: doc.data().text,\n      date: doc.data().date,\n      userId: doc.data().userId\n    }];\n  });\n  return data;\n}\nexport async function getNote(id) {\n  let data;\n  let doc = await firebaseDb.collection('notes').doc(id).get();\n  data = {\n    id: doc.id,\n    text: doc.data().text,\n    date: doc.data().date,\n    userId: doc.data().userId,\n    imageUrl: doc.data().imageUrl\n  };\n  console.log(doc.data());\n  return data;\n}\nexport async function updateNote(id, noteData) {\n  await firebaseDb.collection('notes').doc(id).set(noteData, {\n    merge: true\n  });\n}\nexport async function deleteNote(id, imageUrl) {\n  if (imageUrl.length !== 0) {\n    imageUrl.map(async url => {\n      const fileRef = app.storage().refFromURL(url);\n\n      try {\n        await fileRef.delete();\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n\n  await firebaseDb.collection('notes').doc(id).delete();\n}\nexport async function uploadImage(userId, date, imageData) {\n  const fileRef = storageRef.child(`/${userId}/images/${date}/${imageData.name}`);\n  await fileRef.put(imageData);\n  let url = await fileRef.getDownloadURL();\n  return url;\n}","map":{"version":3,"sources":["/Users/takasivenkatasandeep/Desktop/nursery/src/services/firebase.js"],"names":["app","PlayCircleOutlineTwoTone","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","firebaseDb","firestore","storageRef","storage","ref","addUser","email","password","userData","auth","createUserWithEmailAndPassword","collection","doc","user","uid","set","createdAt","FieldValue","serverTimestamp","error","alert","message","logoutUser","signOut","err","loginUser","signInWithEmailAndPassword","addNote","collectionName","data","add","getUserNotes","id","userdata","where","orderBy","get","forEach","text","date","userId","getNote","imageUrl","console","log","updateNote","noteData","merge","deleteNote","length","map","url","fileRef","refFromURL","delete","uploadImage","imageData","child","name","put","getDownloadURL"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/firestore'\nimport 'firebase/auth'\nimport 'firebase/storage'\nimport { PlayCircleOutlineTwoTone } from '@material-ui/icons';\nconst config = {\n   apiKey: \"AIzaSyBmIcRoW1W55HUxkDq2I8A76VbfSOvifew\",\n  authDomain: \"greenary-gardens.firebaseapp.com\",\n  projectId: \"greenary-gardens\",\n  storageBucket: \"greenary-gardens.appspot.com\",\n  messagingSenderId: \"909264771422\",\n  appId: \"1:909264771422:web:445f6d6267c15d4c9e17cf\",\n  measurementId: \"G-B1J3H3H0GL\"\n};\napp.initializeApp(config);\n\nconst firebaseDb = app.firestore()\nconst storageRef = app.storage().ref()\n\nexport default app;\n\nexport async function addUser(email,password){\n    try{\n    let userData = await app.auth().createUserWithEmailAndPassword(email,password)\n    await firebaseDb.collection('users').doc(userData.user.uid).set({\n        email,\n        password,\n        createdAt: app.firestore.FieldValue.serverTimestamp()\n            })\n    }\n    catch(error){\n        alert(error.message)\n    }\n}\nexport async function logoutUser(){\n    try{\n        await app.auth().signOut()\n    }\n    catch(err){\n        alert(err.message)\n    }\n}\nexport async function loginUser(email,password){\n    try{\n        await app.auth().signInWithEmailAndPassword(email,password)\n    }\n    catch(error){\n        alert(error.message)\n    }\n}\n\n\nexport async function addNote(collectionName,data){ \n    await firebaseDb.collection(collectionName)\n    .add(\n        {\n           ...data,\n           createdAt: app.firestore.FieldValue.serverTimestamp()\n        })\n}\nexport async function getUserNotes(id){\n    let data =[]\n    let userdata = await firebaseDb.collection('notes').where(\"userId\",\"==\",id).orderBy(\"createdAt\",\"desc\").get()\n    userdata.forEach((doc)=>{\n        data = [\n            ...data,\n            {\n            id:doc.id,\n            text:doc.data().text,\n            date:doc.data().date,\n            userId:doc.data().userId,\n        }]\n    })\n    return data\n}\nexport async function getNote(id){\n    let data \n    let doc = await firebaseDb.collection('notes').doc(id).get()\n        data = {\n            id:doc.id,\n            text:doc.data().text,\n            date:doc.data().date,\n            userId:doc.data().userId,\n            imageUrl:doc.data().imageUrl\n        }\n        console.log(doc.data())\n    return data\n}\nexport async function updateNote(id,noteData){\n    await firebaseDb.collection('notes').doc(id).set(noteData,{merge:true})\n}\nexport async function deleteNote(id,imageUrl){\n    if(imageUrl.length!==0){\n        imageUrl.map(async(url)=>{\n            const fileRef = app.storage().refFromURL(url)\n            try{\n            await fileRef.delete()\n            }\n            catch(err){\n                console.log(err)\n            }\n        })\n    }\n    await firebaseDb.collection('notes').doc(id).delete()\n\n}\n\nexport async function uploadImage(userId,date,imageData){\n    const fileRef = storageRef.child(`/${userId}/images/${date}/${imageData.name}`);\n    await fileRef.put(imageData)\n    let url = await fileRef.getDownloadURL()\n    return url\n}"]},"metadata":{},"sourceType":"module"}