{"ast":null,"code":"export function textFormValidator() {\n  return {\n    required: 'This field is required',\n    minLength: {\n      value: 4,\n      message: 'min length of this field is 4'\n    },\n    maxLenght: {\n      value: 20,\n      message: 'max length of this field is 20'\n    }\n  };\n}\nexport function emailFormValidator() {\n  return {\n    required: 'This field is required',\n    maxLength: {\n      value: 30,\n      message: 'Email shouldnot be more than 30 characters long'\n    },\n    validate: value => {\n      const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return pattern.test(value) || 'Email is invalid';\n    }\n  };\n}\nexport function passwordFormValidator() {\n  return {\n    required: 'This field is required',\n    minLength: {\n      value: 8,\n      message: 'Password must be minimum 8 letters long'\n    },\n    validate: value => {\n      return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every(pattern => pattern.test(value)) || 'Password must include a-z, A-Z, @..and 0-9';\n    }\n  };\n}\nexport function confirmPasswordValidator(getValues) {\n  return {\n    required: 'This field is required',\n    validate: value => value === getValues().password || 'passwords doesnt match'\n  };\n}\nexport function numberValidator() {\n  return {\n    required: 'price is required',\n    min: {\n      value: 1,\n      message: 'min price is 1 rupee'\n    }\n  };\n}","map":{"version":3,"sources":["/Users/takasivenkatasandeep/Desktop/nursery/src/FormValidators/FormValidator.js"],"names":["textFormValidator","required","minLength","value","message","maxLenght","emailFormValidator","maxLength","validate","pattern","test","passwordFormValidator","every","confirmPasswordValidator","getValues","password","numberValidator","min"],"mappings":"AAAA,OAAO,SAASA,iBAAT,GAA6B;AAClC,SAAO;AACLC,IAAAA,QAAQ,EAAE,wBADL;AAELC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAFN;AAGLC,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,OAAO,EAAE;AAAtB;AAHN,GAAP;AAKD;AAED,OAAO,SAASE,kBAAT,GAA8B;AACnC,SAAO;AACLL,IAAAA,QAAQ,EAAE,wBADL;AAELM,IAAAA,SAAS,EAAE;AACTJ,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,OAAO,EAAE;AAFA,KAFN;AAMLI,IAAAA,QAAQ,EAAGL,KAAD,IAAW;AACnB,YAAMM,OAAO,GAAG,wJAAhB;AACA,aAAOA,OAAO,CAACC,IAAR,CAAaP,KAAb,KAAuB,kBAA9B;AACD;AATI,GAAP;AAWD;AACD,OAAO,SAASQ,qBAAT,GAAiC;AACtC,SAAO;AACLV,IAAAA,QAAQ,EAAE,wBADL;AAELC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAFN;AAGLI,IAAAA,QAAQ,EAAGL,KAAD,IAAW;AACnB,aAAO,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,cAA5B,EAA4CS,KAA5C,CAAmDH,OAAD,IACvDA,OAAO,CAACC,IAAR,CAAaP,KAAb,CADK,KAEF,4CAFL;AAGD;AAPI,GAAP;AASD;AACD,OAAO,SAASU,wBAAT,CAAkCC,SAAlC,EAA6C;AAClD,SAAO;AACLb,IAAAA,QAAQ,EAAE,wBADL;AAELO,IAAAA,QAAQ,EAAGL,KAAD,IAAWA,KAAK,KAAKW,SAAS,GAAGC,QAAtB,IAAkC;AAFlD,GAAP;AAID;AAED,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAO;AACLf,IAAAA,QAAQ,EAAE,mBADL;AAELgB,IAAAA,GAAG,EAAE;AAAEd,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,OAAO,EAAE;AAArB;AAFA,GAAP;AAID","sourcesContent":["export function textFormValidator() {\n  return {\n    required: 'This field is required',\n    minLength: { value: 4, message: 'min length of this field is 4' },\n    maxLenght: { value: 20, message: 'max length of this field is 20' },\n  }\n}\n\nexport function emailFormValidator() {\n  return {\n    required: 'This field is required',\n    maxLength: {\n      value: 30,\n      message: 'Email shouldnot be more than 30 characters long',\n    },\n    validate: (value) => {\n      const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      return pattern.test(value) || 'Email is invalid'\n    },\n  };\n}\nexport function passwordFormValidator() {\n  return {\n    required: 'This field is required',\n    minLength: { value: 8, message: 'Password must be minimum 8 letters long' },\n    validate: (value) => {\n      return [/[a-z]/, /[A-Z]/, /[0-9]/, /[^a-zA-Z0-9]/].every((pattern) =>\n        pattern.test(value)\n      ) || 'Password must include a-z, A-Z, @..and 0-9';\n    },\n  };\n}\nexport function confirmPasswordValidator(getValues) {\n  return {\n    required: 'This field is required',\n    validate: (value) => value === getValues().password || 'passwords doesnt match',\n  };\n}\n\nexport function numberValidator() {\n  return {\n    required: 'price is required',\n    min: { value: 1, message: 'min price is 1 rupee' },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}